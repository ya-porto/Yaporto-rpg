# docker-compose.yaml
version: "3"

services:
    # MongoDB ставим впереди server-app, так как тот server-app от этого сервиса
    mongo:
        # Здесь именно image, потому что мы его сами не пишем, он будет взят с докерхаба
        image: mongo
        environment:
            MONGO_INITDB_ROOT_USERNAME: user
            MONGO_INITDB_ROOT_PASSWORD: password
        volumes:
          - ./mongo:/data/db
        ports:
          - "27017:27017"
        # Появился новый параметр — networks, о нём ниже
        networks:
            # Назвать сеть можно как угодно
            - awesome

    server-app:
        environment:
            - MONGO_HOST=mongo
        env_file:
            ./dev.env
        # Этим ключом мы скажем docker-compose, чтобы он собирал докерфайл, который 
        # находится в папке рядом с docker-compose.yaml
        build:
            context: .
        # Проброс порта так же, как в командной строке — на какой порт хоста какой порт контейнера
        ports:
          - "3000:3000"
        # Зависимость от сервиса mongo
        depends_on:
            - mongo
            - postgres
        restart: always
        # Важно добавить сеть всем сервисам, которые должны взаимодействовать между собой
        networks:
            - awesome
        command: ./wait-for.sh mongo:27017 -- npm run start

    postgres:
        image: postgres:12
        ports:
            - "5432:5432"
        volumes: 
            - ./postgresdata:/var/lib/postgresql/data
            # Если у вас есть схема БД, которую можно подгрузить на старте, — передайте её
            # - ./src/migrations/dbinit.sql:/docker-entrypoint-initdb.d/dbinit.sql
        restart: always
        environment:
            POSTGRES_USER: postgres
            POSTGRES_PASSWORD: newPassword
            POSTGRES_DB: my-db-name
        networks:
        - awesome
    pgadmin:
        image: dpage/pgadmin4:4.18
        restart: always
        environment:
            PGADMIN_DEFAULT_EMAIL: admin@admin.com
            PGADMIN_DEFAULT_PASSWORD: secret
            PGADMIN_LISTEN_PORT: 80
        ports:
            - "8080:80"
        volumes:
            - pgadmin-data:/var/lib/pgadmin
        depends_on:
            - postgres
        networks:
            - awesome

volumes:
    pgadmin-data:

# Настройки созданной сети между сервисами
networks:
    awesome:
        driver: bridge